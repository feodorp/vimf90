" File: comp.vim
" Author: Rudra Banerjee (bnrj DOT rudra at gmail.com) 
" Version: 0.2
" Copyright: Copyright (C) 2015 Rudra Banerjee
" 
"    This program is free software: you can redistribute it and/or modify
"    it under the terms of the GNU General Public License as published by
"    the Free Software Foundation, either version 3 of the License, or
"    (at your option) any later version.
"
"    This program is distributed in the hope that it will be useful,
"    but WITHOUT ANY WARRANTY; without even the implied warranty of
"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
"    GNU General Public License for more details.
"
" Description: This file completes lists of subprogram
 

function! GetComp(arg)
"if ! exists('g:modpath')
  "let g:modpath = 'src,,.'
"endif
python << EOF
import vim
import os
flsts = [' ']
if vim.eval("a:arg") == "module":
  flsts.append("ieee_arithmatic")
  flsts.append("ieee_exceptions")
  flsts.append("ieee_features")
  flsts.append("iso_C_binding")
  flsts.append("iso_fortran_env")
  flsts.append("omp_lib")
  flsts.append("omp_lib_kinds")
if vim.eval("a:arg") == "subroutine":
  flsts.append("get_command()")
  flsts.append("get_command_argument()")
  
path = "."
for dirs, subdirs, files in os.walk(path):
    for tfile in files:
        if tfile.endswith(('f90', 'F90', 'f', 'F')):
            ofile = open(dirs+'/'+tfile)
            for line in ofile:
                if line.lower().strip().startswith(vim.eval("a:arg")):
                    modname = line.split()[1]
                    flsts.append(modname)
vim.command("let flstsI = %s"%flsts)                    
EOF
call complete(col('.'), flstsI)
return ''
endfunction


"Fortran Makefile creator
"Autoconf
function! MakeAConf()
python<< EOF
import vim
import os
ofn="configure.ac"
if os.path.isfile("configure.ac"):
  ofn="configure.ac.gen"
try:
  with open("sys", "r") as fin:
    for line in fin:
      try:
        if line.startswith("Project"):
          binname = line.split("=")[1].rstrip("\n").strip()
          if (not binname):
            raise ValueError("Empty String")
      except ValueError:
          binname=os.path.basename(os.getcwd())
  fin.close()
except IOError:
  binname=os.path.basename(os.getcwd())

with open(ofn,"w") as con:
    con.write("#This file is generated by vimf90 plugin\n#This is a bare bone configure.ac file\n")
    con.write("#AC_PREREQ(2.69)\n")
    con.write("AC_INIT(["+binname+"],[0.1])\n")
    con.write("AC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_MACRO_DIR([m4])\n")
    con.write("AM_INIT_AUTOMAKE([1.9.6 dist-bzip2 subdir-objects foreign])\n")
    con.write("AC_OPENMP\nFCFLAGS=\"$OPENMP_FFLAGS -std=f2008 -g\"\nAC_PROG_FC([gfortran])\n")
    con.write("AC_CHECK_PROG([DEPF90_CHECK],[makedepf90],[yes],[no])\n")
    con.write("AM_CONDITIONAL([FOUND_MAKEDEPF90], [test \"x$DEPF90_CHECK\" = xyes])\n")
    con.write("AM_COND_IF([FOUND_MAKEDEPF90],,[AC_MSG_WARN([required program 'makedepf90' not found.])])\n")
    con.write("AC_CONFIG_FILES([\n\tMakefile\n\t])\nAC_OUTPUT")
print "File "+ofn+" created. Check it before proceed."#+instr
EOF
endfunction   

"Automake
function! MakeAMake()
python<<EOF
import vim
import os
path = "."
slsts=[" "]
s=" "
ss=""
ofn="Makefile.am"
if os.path.isfile("Makefile.am"):
  ofn="Makefile.am.gen"
try:
  with open("sys", "r") as fin:
    for line in fin:
      try:
        if line.startswith("Project"):
          binname = line.split("=")[1].rstrip("\n").strip()
          if (not binname):
            raise ValueError("Empty String")
      except ValueError:
          binname=os.path.basename(os.getcwd())
      try:
        if line.startswith("Exclude"):
          exclude = line.rstrip("\n").split(" ")[1:]
          if not exclude:
            raise IndexError("Empty List")
      except IndexError:
        exclude=[""]
  fin.close()
except IOError:
  exclude=[""]
  binname=os.path.basename(os.getcwd())
print exclude
print binname
for dirs, subdirs, files in os.walk(path, topdown=True):
  subdirs[:] = [d for d in subdirs if d not in exclude]    
  for srcs in files:      
    if srcs.endswith((".f", ".f90", ".F", ".F90")):
      snm=dirs+"/"+srcs
      s +=snm+" "
      ss +=os.path.splitext(snm)[0]+".o:"+snm+"\n"
with open(ofn,"w") as mak:
  mak.write("#This file is generated by vimf90 plugin\n#This is a bare bone Makefile.am file\n")
  mak.write("bin_PROGRAMS =\t"+binname+"\n")
  mak.write(binname+"_SOURCES =\t"+s+"\n")
  mak.write("if FOUND_MAKEDEPF90\ndepend depend.mk:\n\tmakedepf90 $("+binname+"_SOURCES) >depend.mk\n")
  mak.write("@am__include@ @am__quote@depend.mk@am__quote@\n")
  mak.write("else\n$(warning Create the dependencies Manually or try installing makedepf90)\n")
  mak.write("$(error  like ./src/main.o:./src/main.f90)\n")
  mak.write(ss+"endif\n")
  mak.write(binname+"_LDADD = \nEXTRA_DIST= \nCLEANFILES =*.mod,*.o")
print "File "+ofn+" created. Check it before proceed."
EOF
endfunction
